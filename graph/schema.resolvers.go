package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.51

import (
	"context"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"graphql-mongodb/graph/model"
)

func (r *queryResolver) Item(ctx context.Context, id string) (*model.Item, error) {
	collection := r.DB.Database("test").Collection("items")
	var result model.Item
	objID, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}
	err = collection.FindOne(ctx, bson.M{"_id": objID}).Decode(&result)
	if err != nil {
		return nil, err
	}
	result.ID = id // Ensure ID is set as a string
	return &result, nil
}

func (r *mutationResolver) CreateItem(ctx context.Context, name string) (*model.Item, error) {
	collection := r.DB.Database("test").Collection("items")
	item := model.Item{
		Name: name,
	}
	res, err := collection.InsertOne(ctx, bson.M{"name": name})
	if err != nil {
		return nil, err
	}
	objID := res.InsertedID.(primitive.ObjectID)
	item.ID = objID.Hex() // Convert ObjectID to string
	return &item, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
